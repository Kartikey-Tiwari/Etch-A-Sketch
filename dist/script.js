(()=>{"use strict";var n={902:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nbutton {\n  font-family: "Montserrat", sans-serif;\n}\n\nul {\n  list-style: none;\n}\n\n.active {\n  background-color: #fce641;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  background-color: #ff5e5b;\n  padding: 10px;\n  position: relative;\n  min-height: 100vh;\n}\n\nh1 {\n  text-align: center;\n  font-size: 48px;\n  color: #ffed66;\n}\n\nmain {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  gap: 10px;\n  flex: 1;\n}\n\n#menu {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n}\n\n#menu-row {\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n}\n\n#menu-row > * {\n  flex: 1;\n}\n\n#board-size-container {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n#board-size-value {\n  text-align: center;\n  color: white;\n  font-weight: bold;\n}\n\n#board {\n  display: flex;\n  flex-direction: column;\n}\n\ninput[type="color"] {\n  height: 0;\n  width: 0;\n  border: none;\n}\n\n.icon {\n  border: 4px solid transparent;\n  padding: 2px;\n}\n\n#color-picker-icon {\n  border: 4px solid black;\n  border-radius: 50%;\n  padding: 2px;\n}\n\nbutton {\n  background-color: white;\n  border: none;\n  font-size: 16px;\n  padding: 15px;\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: #ffed66;\n}\n\n#newGridConfirmation {\n  background-color: white;\n  border-radius: 5px;\n}\n\n.loader {\n  z-index: 3;\n  display: none;\n  border: 16px solid #f3f3f3;\n  border-top: 16px solid #3498db;\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  position: absolute;\n  top: 40%;\n  left: 43%;\n  transform: translate(-50%, -50%);\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.overlay {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  inset: 0;\n  background: rgba(0, 0, 0, 0.9);\n  z-index: 2;\n  display: none;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  right: 0;\n  bottom: 0;\n  transform: translate(-50%, -50%);\n  width: calc(0.8 * min(100vh, 100vw));\n  height: calc(0.8 * min(100vh, 100vw) + 54px);\n  z-index: 3;\n  display: none;\n}\n\n.img-to-download {\n  width: calc(0.8 * min(100vh, 100vw));\n}\n\n@media (max-width: 768px) {\n  main {\n    flex-direction: column-reverse;\n    padding: 20px 0;\n  }\n  #menu {\n    width: 100%;\n  }\n  #menu-row {\n    flex-direction: row;\n    flex-wrap: wrap;\n    max-width: 500px;\n    width: 100%;\n  }\n}\n',"",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;;EAEE,qCAAqC;AACvC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,yBAAyB;EACzB,aAAa;EACb,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;EACnB,SAAS;EACT,OAAO;AACT;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,QAAQ;EACR,YAAY;AACd;;AAEA;EACE,6BAA6B;EAC7B,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,eAAe;EACf,aAAa;EACb,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,UAAU;EACV,aAAa;EACb,0BAA0B;EAC1B,8BAA8B;EAC9B,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,kCAAkC;EAClC,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;AAClC;;AAEA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,QAAQ;EACR,8BAA8B;EAC9B,UAAU;EACV,aAAa;AACf;;AAEA;EACE,eAAe;EACf,QAAQ;EACR,SAAS;EACT,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,oCAAoC;EACpC,4CAA4C;EAC5C,UAAU;EACV,aAAa;AACf;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE;IACE,8BAA8B;IAC9B,eAAe;EACjB;EACA;IACE,WAAW;EACb;EACA;IACE,mBAAmB;IACnB,eAAe;IACf,gBAAgB;IAChB,WAAW;EACb;AACF",sourcesContent:['* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nbutton {\n  font-family: "Montserrat", sans-serif;\n}\n\nul {\n  list-style: none;\n}\n\n.active {\n  background-color: #fce641;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  background-color: #ff5e5b;\n  padding: 10px;\n  position: relative;\n  min-height: 100vh;\n}\n\nh1 {\n  text-align: center;\n  font-size: 48px;\n  color: #ffed66;\n}\n\nmain {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  gap: 10px;\n  flex: 1;\n}\n\n#menu {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n}\n\n#menu-row {\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n}\n\n#menu-row > * {\n  flex: 1;\n}\n\n#board-size-container {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n#board-size-value {\n  text-align: center;\n  color: white;\n  font-weight: bold;\n}\n\n#board {\n  display: flex;\n  flex-direction: column;\n}\n\ninput[type="color"] {\n  height: 0;\n  width: 0;\n  border: none;\n}\n\n.icon {\n  border: 4px solid transparent;\n  padding: 2px;\n}\n\n#color-picker-icon {\n  border: 4px solid black;\n  border-radius: 50%;\n  padding: 2px;\n}\n\nbutton {\n  background-color: white;\n  border: none;\n  font-size: 16px;\n  padding: 15px;\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: #ffed66;\n}\n\n#newGridConfirmation {\n  background-color: white;\n  border-radius: 5px;\n}\n\n.loader {\n  z-index: 3;\n  display: none;\n  border: 16px solid #f3f3f3;\n  border-top: 16px solid #3498db;\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n  position: absolute;\n  top: 40%;\n  left: 43%;\n  transform: translate(-50%, -50%);\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.overlay {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  inset: 0;\n  background: rgba(0, 0, 0, 0.9);\n  z-index: 2;\n  display: none;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  right: 0;\n  bottom: 0;\n  transform: translate(-50%, -50%);\n  width: calc(0.8 * min(100vh, 100vw));\n  height: calc(0.8 * min(100vh, 100vw) + 54px);\n  z-index: 3;\n  display: none;\n}\n\n.img-to-download {\n  width: calc(0.8 * min(100vh, 100vw));\n}\n\n@media (max-width: 768px) {\n  main {\n    flex-direction: column-reverse;\n    padding: 20px 0;\n  }\n  #menu {\n    width: 100%;\n  }\n  #menu-row {\n    flex-direction: row;\n    flex-wrap: wrap;\n    max-width: 500px;\n    width: 100%;\n  }\n}\n'],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],l=r.base?s[0]+r.base:s[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var A=t(u),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(f);else{var h=o(f,r);r.byIndex=c,e.splice(c,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=r(n,o),l=0;l<i.length;l++){var d=t(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=(()=>{let n=0;return()=>(n+=1,`u${`0000${(Math.random()*36**4<<0).toString(36)}`.slice(-4)}${n}`)})();function e(n){const e=[];for(let t=0,r=n.length;t<r;t++)e.push(n[t]);return e}function r(n,e){const t=(n.ownerDocument.defaultView||window).getComputedStyle(n).getPropertyValue(e);return t?parseFloat(t.replace("px","")):0}function o(n,e={}){return{width:e.width||function(n){const e=r(n,"border-left-width"),t=r(n,"border-right-width");return n.clientWidth+e+t}(n),height:e.height||function(n){const e=r(n,"border-top-width"),t=r(n,"border-bottom-width");return n.clientHeight+e+t}(n)}}const i=16384;function a(n){return new Promise(((e,t)=>{const r=new Image;r.decode=()=>e(r),r.onload=()=>e(r),r.onerror=t,r.crossOrigin="anonymous",r.decoding="async",r.src=n}))}const c=(n,e)=>{if(n instanceof e)return!0;const t=Object.getPrototypeOf(n);return null!==t&&(t.constructor.name===e.name||c(t,e))};function s(t,r,o){const i=window.getComputedStyle(t,o),a=i.getPropertyValue("content");if(""===a||"none"===a)return;const c=n();try{r.className=`${r.className} ${c}`}catch(n){return}const s=document.createElement("style");s.appendChild(function(n,t,r){const o=`.${n}:${t}`,i=r.cssText?function(n){const e=n.getPropertyValue("content");return`${n.cssText} content: '${e.replace(/'|"/g,"")}';`}(r):function(n){return e(n).map((e=>`${e}: ${n.getPropertyValue(e)}${n.getPropertyPriority(e)?" !important":""};`)).join(" ")}(r);return document.createTextNode(`${o}{${i}}`)}(c,o,i)),r.appendChild(s)}const l="application/font-woff",d="image/jpeg",u={woff:l,woff2:l,ttf:"application/font-truetype",eot:"application/vnd.ms-fontobject",png:"image/png",jpg:d,jpeg:d,gif:"image/gif",tiff:"image/tiff",svg:"image/svg+xml",webp:"image/webp"};function A(n){const e=function(n){const e=/\.([^./]*?)$/g.exec(n);return e?e[1]:""}(n).toLowerCase();return u[e]||""}function f(n){return-1!==n.search(/^(data:)/)}function h(n,e){return`data:${e};base64,${n}`}async function p(n,e,t){const r=await fetch(n,e);if(404===r.status)throw new Error(`Resource "${r.url}" not found`);const o=await r.blob();return new Promise(((n,e)=>{const i=new FileReader;i.onerror=e,i.onloadend=()=>{try{n(t({res:r,result:i.result}))}catch(n){e(n)}},i.readAsDataURL(o)}))}const m={};async function g(n,e,t){const r=function(n,e,t){let r=n.replace(/\?.*/,"");return t&&(r=n),/ttf|otf|eot|woff2?/i.test(r)&&(r=r.replace(/.*\//,"")),e?`[${e}]${r}`:r}(n,e,t.includeQueryParams);if(null!=m[r])return m[r];let o;t.cacheBust&&(n+=(/\?/.test(n)?"&":"?")+(new Date).getTime());try{const r=await p(n,t.fetchRequestInit,(({res:n,result:t})=>(e||(e=n.headers.get("Content-Type")||""),function(n){return n.split(/,/)[1]}(t))));o=h(r,e)}catch(e){o=t.imagePlaceholder||"";let r=`Failed to fetch resource: ${n}`;e&&(r="string"==typeof e?e:e.message),r&&console.warn(r)}return m[r]=o,o}const y=n=>null!=n.tagName&&"SLOT"===n.tagName.toUpperCase();async function E(n,t,r){return r||!t.filter||t.filter(n)?Promise.resolve(n).then((n=>async function(n,e){return c(n,HTMLCanvasElement)?async function(n){const e=n.toDataURL();return"data:,"===e?n.cloneNode(!1):a(e)}(n):c(n,HTMLVideoElement)?async function(n,e){if(n.currentSrc){const e=document.createElement("canvas"),t=e.getContext("2d");return e.width=n.clientWidth,e.height=n.clientHeight,null==t||t.drawImage(n,0,0,e.width,e.height),a(e.toDataURL())}const t=n.poster,r=A(t);return a(await g(t,r,e))}(n,e):c(n,HTMLIFrameElement)?async function(n){var e;try{if(null===(e=null==n?void 0:n.contentDocument)||void 0===e?void 0:e.body)return await E(n.contentDocument.body,{},!0)}catch(n){}return n.cloneNode(!1)}(n):n.cloneNode(!1)}(n,t))).then((r=>async function(n,t,r){var o,i;let a=[];return a=y(n)&&n.assignedNodes?e(n.assignedNodes()):c(n,HTMLIFrameElement)&&(null===(o=n.contentDocument)||void 0===o?void 0:o.body)?e(n.contentDocument.body.childNodes):e((null!==(i=n.shadowRoot)&&void 0!==i?i:n).childNodes),0===a.length||c(n,HTMLVideoElement)||await a.reduce(((n,e)=>n.then((()=>E(e,r))).then((n=>{n&&t.appendChild(n)}))),Promise.resolve()),t}(n,r,t))).then((t=>function(n,t){return c(t,Element)&&(function(n,t){const r=t.style;if(!r)return;const o=window.getComputedStyle(n);o.cssText?(r.cssText=o.cssText,r.transformOrigin=o.transformOrigin):e(o).forEach((e=>{let i=o.getPropertyValue(e);if("font-size"===e&&i.endsWith("px")){const n=Math.floor(parseFloat(i.substring(0,i.length-2)))-.1;i=`${n}px`}c(n,HTMLIFrameElement)&&"display"===e&&"inline"===i&&(i="block"),"d"===e&&t.getAttribute("d")&&(i=`path(${t.getAttribute("d")})`),r.setProperty(e,i,o.getPropertyPriority(e))}))}(n,t),function(n,e){s(n,e,":before"),s(n,e,":after")}(n,t),function(n,e){c(n,HTMLTextAreaElement)&&(e.innerHTML=n.value),c(n,HTMLInputElement)&&e.setAttribute("value",n.value)}(n,t),function(n,e){if(c(n,HTMLSelectElement)){const t=e,r=Array.from(t.children).find((e=>n.value===e.getAttribute("value")));r&&r.setAttribute("selected","")}}(n,t)),t}(n,t))).then((n=>async function(n,e){const t=n.querySelectorAll?n.querySelectorAll("use"):[];if(0===t.length)return n;const r={};for(let o=0;o<t.length;o++){const i=t[o].getAttribute("xlink:href");if(i){const t=n.querySelector(i),o=document.querySelector(i);t||!o||r[i]||(r[i]=await E(o,e,!0))}}const o=Object.values(r);if(o.length){const e="http://www.w3.org/1999/xhtml",t=document.createElementNS(e,"svg");t.setAttribute("xmlns",e),t.style.position="absolute",t.style.width="0",t.style.height="0",t.style.overflow="hidden",t.style.display="none";const r=document.createElementNS(e,"defs");t.appendChild(r);for(let n=0;n<o.length;n++)r.appendChild(o[n]);n.appendChild(t)}return n}(n,t))):null}const C=/url\((['"]?)([^'"]+?)\1\)/g,w=/url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g,b=/src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;function v(n){return-1!==n.search(C)}async function x(n,e,t){if(!v(n))return n;const r=function(n,{preferredFontFormat:e}){return e?n.replace(b,(n=>{for(;;){const[t,,r]=w.exec(n)||[];if(!r)return"";if(r===e)return`src: ${t};`}})):n}(n,t),o=function(n){const e=[];return n.replace(C,((n,t,r)=>(e.push(r),n))),e.filter((n=>!f(n)))}(r);return o.reduce(((n,r)=>n.then((n=>async function(n,e,t,r,o){try{const i=t?function(n,e){if(n.match(/^[a-z]+:\/\//i))return n;if(n.match(/^\/\//))return window.location.protocol+n;if(n.match(/^[a-z]+:/i))return n;const t=document.implementation.createHTMLDocument(),r=t.createElement("base"),o=t.createElement("a");return t.head.appendChild(r),t.body.appendChild(o),e&&(r.href=e),o.href=n,o.href}(e,t):e,a=A(e);let c;return c=o?h(await o(i),a):await g(i,a,r),n.replace(function(n){const e=n.replace(/([.*+?^${}()|\[\]\/\\])/g,"\\$1");return new RegExp(`(url\\(['"]?)(${e})(['"]?\\))`,"g")}(e),`$1${c}$3`)}catch(n){}return n}(n,r,e,t)))),Promise.resolve(r))}async function B(n,e,t){var r;const o=null===(r=e.style)||void 0===r?void 0:r.getPropertyValue(n);if(o){const r=await x(o,null,t);return e.style.setProperty(n,r,e.style.getPropertyPriority(n)),!0}return!1}async function k(n,t){c(n,Element)&&(await async function(n,e){await B("background",n,e)||await B("background-image",n,e),await B("mask",n,e)||await B("mask-image",n,e)}(n,t),await async function(n,e){const t=c(n,HTMLImageElement);if((!t||f(n.src))&&(!c(n,SVGImageElement)||f(n.href.baseVal)))return;const r=t?n.src:n.href.baseVal,o=await g(r,A(r),e);await new Promise(((e,r)=>{n.onload=e,n.onerror=r;const i=n;i.decode&&(i.decode=e),"lazy"===i.loading&&(i.loading="eager"),t?(n.srcset="",n.src=o):n.href.baseVal=o}))}(n,t),await async function(n,t){const r=e(n.childNodes).map((n=>k(n,t)));await Promise.all(r).then((()=>n))}(n,t))}const S={};async function $(n){let e=S[n];if(null!=e)return e;const t=await fetch(n);return e={url:n,cssText:await t.text()},S[n]=e,e}async function T(n,e){let t=n.cssText;const r=/url\(["']?([^"')]+)["']?\)/g,o=(t.match(/url\([^)]+\)/g)||[]).map((async o=>{let i=o.replace(r,"$1");return i.startsWith("https://")||(i=new URL(i,n.url).href),p(i,e.fetchRequestInit,(({result:n})=>(t=t.replace(o,`url(${n})`),[o,n])))}));return Promise.all(o).then((()=>t))}function L(n){if(null==n)return[];const e=[];let t=n.replace(/(\/\*[\s\S]*?\*\/)/gi,"");const r=new RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})","gi");for(;;){const n=r.exec(t);if(null===n)break;e.push(n[0])}t=t.replace(r,"");const o=/@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi,i=new RegExp("((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})","gi");for(;;){let n=o.exec(t);if(null===n){if(n=i.exec(t),null===n)break;o.lastIndex=i.lastIndex}else i.lastIndex=o.lastIndex;e.push(n[0])}return e}async function R(n,t){const r=null!=t.fontEmbedCSS?t.fontEmbedCSS:t.skipFonts?null:await async function(n,t){const r=await async function(n,t){if(null==n.ownerDocument)throw new Error("Provided element is not within a Document");const r=e(n.ownerDocument.styleSheets),o=await async function(n,t){const r=[],o=[];return n.forEach((r=>{if("cssRules"in r)try{e(r.cssRules||[]).forEach(((n,e)=>{if(n.type===CSSRule.IMPORT_RULE){let i=e+1;const a=$(n.href).then((n=>T(n,t))).then((n=>L(n).forEach((n=>{try{r.insertRule(n,n.startsWith("@import")?i+=1:r.cssRules.length)}catch(e){console.error("Error inserting rule from remote css",{rule:n,error:e})}})))).catch((n=>{console.error("Error loading remote css",n.toString())}));o.push(a)}}))}catch(e){const i=n.find((n=>null==n.href))||document.styleSheets[0];null!=r.href&&o.push($(r.href).then((n=>T(n,t))).then((n=>L(n).forEach((n=>{i.insertRule(n,r.cssRules.length)})))).catch((n=>{console.error("Error loading remote stylesheet",n)}))),console.error("Error inlining remote css file",e)}})),Promise.all(o).then((()=>(n.forEach((n=>{if("cssRules"in n)try{e(n.cssRules||[]).forEach((n=>{r.push(n)}))}catch(e){console.error(`Error while reading CSS rules from ${n.href}`,e)}})),r)))}(r,t);return function(n){return n.filter((n=>n.type===CSSRule.FONT_FACE_RULE)).filter((n=>v(n.style.getPropertyValue("src"))))}(o)}(n,t);return(await Promise.all(r.map((n=>{const e=n.parentStyleSheet?n.parentStyleSheet.href:null;return x(n.cssText,e,t)})))).join("\n")}(n,t);if(r){const e=document.createElement("style"),t=document.createTextNode(r);e.appendChild(t),n.firstChild?n.insertBefore(e,n.firstChild):n.appendChild(e)}}async function I(n,e={}){const{width:t,height:r}=o(n,e),i=await E(n,e,!0);return await R(i,e),await k(i,e),function(n,e){const{style:t}=n;e.backgroundColor&&(t.backgroundColor=e.backgroundColor),e.width&&(t.width=`${e.width}px`),e.height&&(t.height=`${e.height}px`);const r=e.style;null!=r&&Object.keys(r).forEach((n=>{t[n]=r[n]}))}(i,e),await async function(n,e,t){const r="http://www.w3.org/2000/svg",o=document.createElementNS(r,"svg"),i=document.createElementNS(r,"foreignObject");return o.setAttribute("width",`${e}`),o.setAttribute("height",`${t}`),o.setAttribute("viewBox",`0 0 ${e} ${t}`),i.setAttribute("width","100%"),i.setAttribute("height","100%"),i.setAttribute("x","0"),i.setAttribute("y","0"),i.setAttribute("externalResourcesRequired","true"),o.appendChild(i),i.appendChild(n),async function(n){return Promise.resolve().then((()=>(new XMLSerializer).serializeToString(n))).then(encodeURIComponent).then((n=>`data:image/svg+xml;charset=utf-8,${n}`))}(o)}(i,t,r)}var P=t(379),M=t.n(P),z=t(795),N=t.n(z),q=t(569),O=t.n(q),U=t(565),j=t.n(U),V=t(216),H=t.n(V),D=t(589),F=t.n(D),W=t(902),Y={};Y.styleTagTransform=F(),Y.setAttributes=j(),Y.insert=O().bind(null,"head"),Y.domAPI=N(),Y.insertStyleElement=H(),M()(W.Z,Y),W.Z&&W.Z.locals&&W.Z.locals;const Q=document.querySelector("#board"),Z=document.querySelectorAll("button:not(#newGridConfirmation,#save-as-img)"),G=document.querySelector("#newGridConfirmation"),_=document.querySelector('input[type="color"]'),X=document.querySelector("#board-size"),J=document.querySelector("#save-as-img"),K=document.querySelector(".img-to-download"),nn=document.querySelector(".download"),en=document.querySelector(".overlay"),tn=document.querySelector(".modal"),rn=document.querySelector("#color-picker-btn"),on=document.querySelector("#color-picker");let an=document.querySelector("#board-size-value"),cn=11,sn=!1,ln=!1,dn=`${_.value}`,un=document.querySelector("#normal");function An(){for(let n=0;n<cn;n++){const n=document.createElement("div");n.style.display="flex",n.style.height=`calc(100%/${cn})`;for(let e=0;e<cn;e++){const e=document.createElement("div");e.addEventListener("mouseover",hn),e.addEventListener("mousedown",hn),e.style.width=`calc(100%/${cn})`,e.style.background="100%",e.style.backgroundColor="white",n.appendChild(e)}Q.appendChild(n)}}function fn(){let n=Q.parentElement.offsetWidth,e=Q.parentElement.offsetHeight,t=.9*Math.min(n,e);Q.style.width=t+"px",Q.style.height=t+"px"}function hn(n){if(n.preventDefault(),"eraser"===un.id&&(dn="white"),"mousedown"===n.type){if("fill"===un.id){const e=Array.from(Q.children).indexOf(n.target.parentElement),t=Array.from(n.target.parentElement.children).indexOf(n.target);return void yn(n.target,e,t)}ln=!0}1===n.buttons&&ln?("rainbow"===un.getAttribute("id")&&(dn=`#${Math.floor(16777216*Math.random()).toString(16)}`),n.target.style.backgroundColor=`${dn}`):ln=!1}function pn(n){Array.from(Q.children).forEach((e=>{Array.from(e.children).forEach((t=>{t!=e.children[0]&&(t.style.borderLeft=n),e!==Q.children[0]&&(t.style.borderTop=n)}))}))}function mn(){pn("1px solid grey")}function gn(){pn("none")}function yn(n,e,t){if(n.style.backgroundColor===(r=dn,`rgb(${parseInt(r.substring(1,3),16)}, ${parseInt(r.substring(3,5),16)}, ${parseInt(r.substring(5,7),16)})`))return;var r;const o=n.style.backgroundColor;n.style.backgroundColor=dn,e>0&&Q.children[e-1].children[t].style.backgroundColor===o&&yn(Q.children[e-1].children[t],e-1,t),e<cn-1&&Q.children[e+1].children[t].style.backgroundColor===o&&yn(Q.children[e+1].children[t],e+1,t),t>0&&Q.children[e].children[t-1].style.backgroundColor===o&&yn(Q.children[e].children[t-1],e,t-1),t<cn-1&&Q.children[e].children[t+1].style.backgroundColor===o&&yn(Q.children[e].children[t+1],e,t+1)}function En(){en.style.display="none",tn.style.display="none"}un.classList.add("active"),window.onresize=function(){fn()},_.addEventListener("input",(n=>{"eraser"!==un.id&&(dn=`${_.value}`)})),document.addEventListener("keydown",(n=>{"Escape"===n.key&&En()})),en.addEventListener("click",(()=>{En()})),nn.addEventListener("click",(function(){const n=document.createElement("a");n.download="image.png",n.href=K.src,n.click()})),window.onload=function(){setTimeout((()=>{const n=document.querySelector("svg");on.addEventListener("input",(()=>{n.style.border=`4px solid ${on.value}`}))}),1e3)},Z.forEach((n=>{"gridlines"!=n.id&&"color-picker-btn"!=n.id?n.addEventListener("click",(e=>{"reset"!==n.id?(un.classList.remove("active"),n.classList.add("active"),un=n,"normal"===n.id||"fill"===n.id?dn=`${_.value}`:"eraser"===n.id&&(dn="white")):Array.from(Q.children).forEach((n=>{Array.from(n.children).forEach((n=>{n.style.backgroundColor="white"}))}))})):"gridlines"===n.id&&n.addEventListener("click",(()=>{sn?(sn=!1,n.classList.remove("active"),gn()):(sn=!0,n.classList.add("active"),mn())}))})),G.addEventListener("click",(n=>{+X.value!==cn&&confirm("Create new board?")&&(function(){for(let n=Q.children.length-1;n>=0;n--)Q.children[n].remove()}(),cn=+X.value,An(),sn&&mn())})),X.addEventListener("input",(n=>{an.textContent=`${X.value} x ${X.value}`})),rn.addEventListener("click",(()=>{on.click()}));const Cn=document.querySelector(".loader");J.addEventListener("click",(()=>{en.style.display="block",Cn.style.display="block",setTimeout((()=>{sn&&gn()}),0),setTimeout((()=>{(async function(n,e={}){return(await async function(n,e={}){const{width:t,height:r}=o(n,e),c=await I(n,e),s=await a(c),l=document.createElement("canvas"),d=l.getContext("2d"),u=e.pixelRatio||function(){let n,e;try{e=process}catch(n){}const t=e&&e.env?e.env.devicePixelRatio:null;return t&&(n=parseInt(t,10),Number.isNaN(n)&&(n=1)),n||window.devicePixelRatio||1}(),A=e.canvasWidth||t,f=e.canvasHeight||r;return l.width=A*u,l.height=f*u,e.skipAutoScale||function(n){(n.width>i||n.height>i)&&(n.width>i&&n.height>i?n.width>n.height?(n.height*=i/n.width,n.width=i):(n.width*=i/n.height,n.height=i):n.width>i?(n.height*=i/n.width,n.width=i):(n.width*=i/n.height,n.height=i))}(l),l.style.width=`${A}`,l.style.height=`${f}`,e.backgroundColor&&(d.fillStyle=e.backgroundColor,d.fillRect(0,0,l.width,l.height)),d.drawImage(s,0,0,l.width,l.height),l}(n,e)).toDataURL()})(Q).then((function(n){Cn.style.display="none",K.src=n,en.style.display="block",tn.style.display="block"})).catch((function(n){console.error("oops, something went wrong!",n)}))}),1),setTimeout((()=>{sn&&mn()}),2)})),fn(),An()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,